using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Web;
using System.Xml.Linq;
using umbraco.BusinessLogic;
using umbraco.cms.businesslogic;
using umbraco.cms.businesslogic.web;

namespace uLoremsy.UmbracoEvents
{
    public class uLoremsy : ApplicationBase
    {
        protected const string configFile = "/config/uLoremsy.config";

        public uLoremsy()
        {
            Document.New += new Document.NewEventHandler(Document_New);
        }


        /// <summary>
        /// On new document, prepopulate.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void Document_New(Document sender, NewEventArgs e)
        {
            // read xml file
            string fileContent = File.ReadAllText(HttpContext.Current.Server.MapPath(configFile));

            // get trees
            var trees = XDocument.Parse(fileContent).FirstNode.Document.Descendants("tree");

            // get wildcard tree
            var wildcardTreeXml = GetuLoremsyTreeWildcard(trees);
            if (wildcardTreeXml != null)
            {
                ProcessTree(sender, wildcardTreeXml);
            }

            // process specified tree and properties - overwrites
            var treeXml = GetuLoremsyTreeXElem(sender, trees);
            if (treeXml != null)
            {
                var properties = ProcessTree(sender, treeXml);
            }

        }



        private Document ProcessTree(Document document, XElement treeXml)
        {
            

            // do wildcard doctype first
            var wildcardDoctype = GetuLoremsyDocTypeWildcard(treeXml);

            if (wildcardDoctype != null)
            {
                // get properties from uLoremsy.config
                var wildcardProps = wildcardDoctype.Descendants("property").Where(x => x.Attribute("enabled").Value == "true");

                // process prevalues
                SetPreValues(document, wildcardProps);
            }

            // get specified doctype
            var doctypeDefs = GetuLoremsyDoctypeDefsXElem(document, treeXml);
            foreach (var docType in doctypeDefs)
            {
                // get properties from uLoremsy.config
                IEnumerable<XElement> properties = docType.Descendants("property").Where(x => x.Attribute("enabled").Value == "true");

                // process prevalues
                SetPreValues(document, properties);
            }

            return document;
        }



        /// <summary>
        /// Iterate over xml, set values in document.
        /// </summary>
        /// <param name="document"></param>
        /// <param name="propertiesXml"></param>
        /// <returns></returns>
        private Document SetPreValues(Document document, IEnumerable<XElement> propertiesXml)
        {
            // iterate over properties and set values
            foreach (var property in propertiesXml)
            {
                var propertyAlias = property.Attribute("alias").Value;
                var value = property.Value.ToString().Trim();

                value = GetFromStandardValues(document, value);

                // check for existance of property
                if (document.getProperty(propertyAlias) == null) { continue; }

                // set value
                document.getProperty(propertyAlias).Value = value;
            }

            return document;
        }



        /// <summary>
        /// Gets value from supported .Net and Umbraco properties.
        /// </summary>
        /// <param name="document"></param>
        /// <param name="xmlValue"></param>
        /// <returns></returns>
        private string GetFromStandardValues(Document document, string xmlValue)
        {
            string value = xmlValue;

            switch (xmlValue)
            {
                case "DateTime.Now":
                    value = DateTime.Now.ToString();
                    break;
                case "DateTime.UtcNow":
                    value = DateTime.UtcNow.ToString();
                    break;
                case "Document.Id":
                    value = document.Id.ToString();
                    break;
                case "Document.DateCreated":
                    value = document.CreateDateTime.ToString();
                    break;
                case "Document.DateUpdated":
                    value = document.UpdateDate.ToString();
                    break;
                case "Document.Name":
                    value = document.Text;
                    break;
                case "Document.NodeTypeAlias":
                    value = document.ContentType.Alias;
                    break;
                default:
                    if (xmlValue.StartsWith("Document.Properties."))
                    {
                        // get value from custom property
                        var alias = xmlValue.Replace("Document.Properties.", string.Empty);
                        if (document.getProperty(alias) == null) { return string.Empty; }

                        value = document.getProperty(alias).Value.ToString();
                    }
                    else if (xmlValue.StartsWith("Document.Parent."))
                    {
                        // recursively go up parent tree until value found
                        value = GetFromStandardValues(new Document(document.ParentId), xmlValue.Replace("Document.Parent", "Document"));
                    }
                    break;
            }
            return value;
        }


        /// <summary>
        /// Get doctype from uLoremsy.config which mataches current doctype
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="tree"></param>
        /// <returns></returns>
        private IEnumerable<XElement> GetuLoremsyDoctypeDefsXElem(Document document, XElement tree)
        {
            var docTypeDefs = tree.Descendants("documentType")
                    .Where(x => x.Attribute("nodeTypeAlias").Value
                                    .Split(",".ToCharArray(), StringSplitOptions.RemoveEmptyEntries)
                                    .Select(s => s.Trim())
                                    .Contains(document.ContentType.Alias))

                    .Where(x => x.Attribute("enabled").Value == "true");

            return docTypeDefs;
        }


        /// <summary>
        /// Get wildcard doctype
        /// </summary>
        /// <param name="tree"></param>
        /// <returns></returns>
        private XElement GetuLoremsyDocTypeWildcard(XElement tree)
        {
            return tree.Descendants("documentType")
                        .Where(x => x.Attribute("nodeTypeAlias").Value == "*")
                        .Where(x => x.Attribute("enabled").Value == "true")
                        .SingleOrDefault();
        }


        /// <summary>
        /// Get tree from uLoremsy.config which has same node name as sender's root.
        /// </summary>
        /// <param name="document"></param>
        /// <param name="trees"></param>
        /// <returns></returns>
        private XElement GetuLoremsyTreeXElem(Document document, IEnumerable<XElement> trees)
        {
            // get tree from uLoremsy.config which matches root
            var tree = trees.Where(x => x.Attribute("nodeName").Value == GetRoot(document).Text)
                        .Where(x => x.Attribute("enabled").Value == "true")
                        .SingleOrDefault();

            return tree;
        }



        /// <summary>
        /// Get wildcard tree.
        /// </summary>
        /// <param name="trees"></param>
        /// <returns></returns>
        private XElement GetuLoremsyTreeWildcard(IEnumerable<XElement> trees)
        {
            return trees.Where(x => x.Attribute("nodeName").Value == "*")
                        .Where(x => x.Attribute("enabled").Value == "true")
                        .SingleOrDefault();
        }





        /// <summary>
        /// Gets root of tree
        /// </summary>
        /// <param name="sender"></param>
        /// <returns></returns>
        private Document GetRoot(Document sender)
        {
            var current = sender;
            while (current.ParentId != -1)
            {
                current = new Document(current.ParentId);
            }

            return current;
        }
    }
}